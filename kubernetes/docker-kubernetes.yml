apiVersion: v1
items:

# ELASTICSEARCH

# Elasticsearch Service
- apiVersion: v1
  kind: Service
  metadata:
    name: elasticsearch
    annotations:
      kompose.cmd: kompose convert -o ./kubernetes/docker-kubernetes.yml
      kompose.version: 1.17.0 (a74acad)
    labels:
      io.kompose.service: elasticsearch
  spec:
    ports:
    - name: "9200"
      port: 9200
      targetPort: 9200
    selector:
      io.kompose.service: elasticsearch
  status:
    loadBalancer: {}

# Elasticsearch Deployment
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o ./kubernetes/docker-kubernetes.yml
      kompose.version: 1.17.0 (a74acad)
    labels:
      io.kompose.service: elasticsearch
    name: elasticsearch
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          io.kompose.service: elasticsearch
      spec:
        containers:
        - env:
          - name: ES_JAVA_OPTS
            value: "-Xms750m -Xmx750m"
          # TODO:
          # To prevent this error: 'memory locking requested for elasticsearch process but memory is not locked'
          # I guess we should alow it: www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html#bootstrap-memory_lock
          # But how to set `kube-apiserver --allow-privileged`?
          - name: bootstrap.memory_lock
            value: "false"
          - name: cluster.initial_master_nodes
            value: es01
          - name: cluster.name
            value: textrepo-cluster
          - name: node.name
            value: es01
          image: docker.elastic.co/elasticsearch/elasticsearch:7.3.0
          name: elasticsearch
          ports:
          - containerPort: 9200
          volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: esdata
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 2Gi
        restartPolicy: Always
        volumes:
        - name: esdata
          persistentVolumeClaim:
            claimName: esdata
  status: {}

# Elasticsearch PersistentVolumeClaim
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      io.kompose.service: esdata
    name: esdata
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}

# POSTGRES

# Postgres Service
- apiVersion: v1
  kind: Service
  metadata:
    name: postgres
  spec:
    ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
    selector:
      io.kompose.service: postgres
  status:
    loadBalancer: {}

# Postgres Deployment
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      io.kompose.service: postgres
    name: postgres
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          io.kompose.service: postgres
      spec:
        containers:
        - env:
          - name: POSTGRES_DB
            value: textrepo
          - name: POSTGRES_HOST
            value: postgres.textrepo
          - name: POSTGRES_PASSWORD
            value: textrepo
          - name: POSTGRES_PORT
            value: textrepo
          - name: POSTGRES_USER
            value: textrepo
          image: knawhuc/textrepo-postgres:latest
          name: postgres
          ports:
          - containerPort: 5432
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 200m
              memory: 200Mi
        restartPolicy: Always

# CONCORDION

# Concordion Service
- apiVersion: v1
  kind: Service
  metadata:
    name: concordion
    annotations:
      kompose.cmd: kompose convert -o ./kubernetes/docker-kubernetes.yml
      kompose.version: 1.17.0 (a74acad)
    labels:
      io.kompose.service: concordion
  spec:
    ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
    selector:
      io.kompose.service: concordion
  status:
    loadBalancer: {}

# Condordion Deployment
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: concordion
    labels:
      io.kompose.service: concordion
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          io.kompose.service: concordion
      spec:
        containers:
        - args:
          - /utils/wait-for-it.sh
          - textrepo-app:8080
          - --timeout=0
          - --
          - mvn
          - clean
          - test
          env:
          - name: APP_HOST
            value: textrepo-app:8080
          - name: ES_HOST
            value: elasticsearch:9200
          - name: POSTGRES_DB
            value: textrepo
          - name: POSTGRES_HOST
            value: textrepo
          - name: POSTGRES_PASSWORD
            value: textrepo
          - name: POSTGRES_USER
            value: textrepo
          image: knawhuc/textrepo-concordion
          imagePullPolicy: Always
          name: concordion
          ports:
          - containerPort: 8080
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 200m
              memory: 200Mi

- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    name: concordion-network-policy
  spec:
    podSelector:
      matchLabels:
        io.kompose.service: concordion
    policyTypes:
    - Egress
    egress:
    - {}

# NGINX

# Nginx Service
- apiVersion: v1
  kind: Service
  metadata:
    name: nginx
    annotations:
      kompose.cmd: kompose convert -o ./kubernetes/docker-kubernetes.yml
      kompose.version: 1.17.0 (a74acad)
    labels:
      io.kompose.service: nginx
  spec:
    ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
    selector:
      io.kompose.service: nginx
  status:
    loadBalancer: {}

# Nginx Deployment
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: nginx
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          io.kompose.service: elasticsearch
      spec:
        containers:
        - image: knawhuc/textrepo-nginx:latest
          name: nginx
          ports:
          - containerPort: 8080
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 200m
              memory: 200Mi
        restartPolicy: Always

# Nginx PersistentVolumeClaim
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      io.kompose.service: nginx-claim1
    name: nginx-claim1
  spec:
    accessModes:
    - ReadOnlyMany
    resources:
      requests:
        storage: 100Mi
  status: {}

# TEXTREPO

# Textrepo-service Service
- apiVersion: v1
  kind: Service
  metadata:
    name: textrepo-app
  spec:
    ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
    selector:
      io.kompose.service: textrepo-app

# Textrepo-app Deployment
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: textrepo-app
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        labels:
          io.kompose.service: textrepo-app
      spec:
        containers:
        - args:
          - /utils/wait-for-it.sh
          - postgres:5432
          - elasticsearch:9200
          - --timeout=0
          - --
          - java
          - -jar
          - /textrepo-app/textrepo.jar
          - server
          - config.yml
          image: knawhuc/textrepo-app:latest
          name: textrepo-app
          ports:
          - containerPort: 8080
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 200m
              memory: 200Mi
        restartPolicy: Always
  status: {}


kind: List
metadata: {}

